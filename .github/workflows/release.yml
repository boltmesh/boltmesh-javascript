name: Release Workflow

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write
  packages: write

concurrency: ${{ github.workflow }}-${{ github.ref }}

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.5.0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'

      - name: Setup npmrc and git
        run: echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > .npmrc

      - name: Install dependencies
        run: pnpm install

      - name: Version and publish
        id: changesets
        uses: changesets/action@v1
        with:
          version: pnpm changeset version
          commit: 'chore: update versions'
          title: 'chore: update versions'
          publish: pnpm publish -F @boltmesh/api --access public --no-git-checks
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Configure Git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Check latest remote tag and current version
        id: check_version
        run: |
          git fetch --tags
          LATEST_TAG=$(git tag --list "v*" --sort=-v:refname | head -n 1)
          echo "Latest remote tag: $LATEST_TAG"
          CURRENT_VERSION=$(node -p "require('./packages/api/package.json').version")
          echo "Current version: $CURRENT_VERSION"
          LATEST_VERSION=${LATEST_TAG#v}
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          if [ "$CURRENT_VERSION" = "$LATEST_VERSION" ]; then
            echo "version_changed=false" >> $GITHUB_OUTPUT
          else
            echo "version_changed=true" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push tag (only if version changed)
        if: steps.check_version.outputs.version_changed == 'true'
        run: |
          git tag -a "v${{ steps.check_version.outputs.current_version }}" -m "Release v${{ steps.check_version.outputs.current_version }}"
          git push origin "v${{ steps.check_version.outputs.current_version }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Changelog
        run: pnpx changelogithub
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
